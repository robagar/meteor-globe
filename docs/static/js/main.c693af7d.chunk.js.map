{"version":3,"sources":["geometry.ts","store.ts","Marker.tsx","Meteor.tsx","Globe.tsx","cameras.ts","meteors.ts","App.tsx","index.tsx"],"names":["EARTH_RADIUS","radians","degrees","Math","PI","position","latitude","longitude","altitude","lat","long","r","cos","sin","enableMapSet","store","Store","highlightedMarker","markers","Map","identifier","label","meteors","Marker","props","radius","labelSize","highlighted","useState","s","setHighlighted","update","onPointerOver","e","onPointerOut","args","visible","color","Billboard","Text","anchorX","anchorY","fontSize","Meteor","beginLatitude","beginLongitude","beginHeight","Globe","camera","fov","near","far","material","useTexture","map","bumpMap","specularMap","frameloop","OrbitControls","minDistance","intensity","m","i","url","a","fetch","response","ok","text","csv","records","parse","columns","camera_id","obs_latitude","obs_longitude","Promise","reject","statusText","initCameras","loadCameras","then","cameras","console","info","c","set","catch","error","initMeteors","async","line","length","slice","fields","split","f","trim","parseFloat","beginUTC","showerCode","mass","stationCodes","includes","push","fetchline","loadMeteors","App","useEffect","className","values","ReactDOM","render","StrictMode","Suspense","fallback","document","getElementById"],"mappings":"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","file":"static/js/main.c693af7d.chunk.js","sourcesContent":["export const EARTH_RADIUS: Km = 6371.37;\n\nexport type Radians = number;\nexport type Degrees = number;\nexport type Km = number;\n\nexport function radians(degrees: Degrees): Radians {\n  return (Math.PI * degrees) / 180;\n}\n\nexport type XYZ = [number, number, number];\n\nexport function position(\n  latitude: Degrees,\n  longitude: Degrees,\n  altitude: Km\n): XYZ {\n  const lat = radians(latitude);\n  const long = radians(longitude);\n  const r = altitude + EARTH_RADIUS;\n  const x = r * Math.cos(lat) * Math.cos(-long);\n  const y = r * Math.sin(lat);\n  const z = r * Math.cos(lat) * Math.sin(-long);\n  return [x, y, z];\n}\n","import { Store } from \"pullstate\";\nimport { enableMapSet } from \"immer\";\n\nimport { MarkerProps } from \"./Marker\";\nimport { MeteorProps } from \"./Meteor\";\n\nenableMapSet();\n\nexport const store = new Store({\n    highlightedMarker: \"\",\n    markers: new Map<string, MarkerProps>([\n        [\n            \"UK003C\",\n            {\n                identifier: \"UK003C\",\n                latitude: 50.224871,\n                longitude: -4.949858,\n                label: \"UK003C\",\n            },\n        ],\n    ]),\n    meteors: [] as MeteorProps[],\n});\n","import { Billboard, Text } from \"@react-three/drei\";\nimport { Degrees, Km, position } from \"./geometry\";\nimport { store } from \"./store\";\n\nexport interface MarkerProps {\n  identifier: string;\n  latitude: Degrees;\n  longitude: Degrees;\n  altitude?: Km;\n  radius?: Km;\n  label?: string;\n  labelSize?: Km;\n}\n\nexport function Marker(props: MarkerProps) {\n  const {\n    identifier,\n    latitude,\n    longitude,\n    altitude = 5,\n    radius = 5,\n    label,\n    labelSize = 50,\n  } = props;\n\n  const highlighted = store.useState((s) => s.highlightedMarker) === identifier;\n  const setHighlighted = (highlighted: boolean) => {\n    if (highlighted) {\n      store.update((s) => {\n        s.highlightedMarker = identifier;\n      });\n    } else {\n      store.update((s) => {\n        if (s.highlightedMarker === identifier) s.highlightedMarker = \"\";\n      });\n    }\n  };\n\n  return (\n    <>\n      <mesh\n        onPointerOver={(e) => setHighlighted(true)}\n        onPointerOut={(e) => setHighlighted(false)}\n        position={position(latitude, longitude, altitude)}\n      >\n        <sphereGeometry args={[radius * 4, 8, 8]} />\n        <meshBasicMaterial visible={false} />\n      </mesh>\n      <mesh position={position(latitude, longitude, altitude)}>\n        <sphereGeometry args={[radius, 16, 16]} />\n        <meshBasicMaterial color=\"hotpink\" />\n      </mesh>\n      {label && (\n        <Billboard\n          visible={highlighted}\n          position={position(latitude, longitude, altitude + 10)}\n        >\n          <Text anchorX=\"left\" anchorY=\"top\" fontSize={labelSize} color=\"white\">\n            {label}\n          </Text>\n        </Billboard>\n      )}\n    </>\n  );\n}\n","import { Degrees, Km, position } from \"./geometry\";\n\nexport interface MeteorProps {\n  beginLatitude: Degrees;\n  beginLongitude: Degrees;\n  beginHeight: Km;\n}\n\nexport function Meteor(props: MeteorProps) {\n  const { beginLatitude, beginLongitude, beginHeight } = props;\n\n  return (\n    <>\n      <mesh position={position(beginLatitude, beginLongitude, beginHeight)}>\n        <sphereGeometry args={[5, 16, 16]} />\n        <meshBasicMaterial color=\"white\" />\n      </mesh>\n    </>\n  );\n}\n","import { Canvas } from \"@react-three/fiber\";\nimport { useTexture, OrbitControls } from \"@react-three/drei\";\n\nimport { EARTH_RADIUS, position } from \"./geometry\";\n\nimport { Marker, MarkerProps } from \"./Marker\";\nimport { Meteor, MeteorProps } from \"./Meteor\";\n\nexport interface GlobeProps {\n  markers: MarkerProps[];\n  meteors: MeteorProps[];\n}\n\nconst MIN_CAMERA_ALTITUDE = 100;\n\nexport function Globe(props: GlobeProps) {\n  const { markers, meteors } = props;\n\n  const camera = {\n    fov: 75,\n    near: 10,\n    far: 100000,\n    position: position(52, 0, 5000),\n  };\n  const material = useTexture({\n    map: \"/meteor-globe/textures/2_no_clouds_4k.jpeg\",\n    bumpMap: \"/meteor-globe/textures/elev_bump_4k.jpeg\",\n    specularMap: \"/meteor-globe/textures/water_4k.png\",\n  });\n  return (\n    <Canvas frameloop=\"demand\" camera={camera}>\n      <OrbitControls minDistance={EARTH_RADIUS + MIN_CAMERA_ALTITUDE} />\n      {/* <axesHelper args={[10000]} /> */}\n      <ambientLight intensity={0.1} />\n      <directionalLight color=\"white\" position={position(0, 0, 1)} />\n      <mesh>\n        <sphereGeometry args={[EARTH_RADIUS, 128, 128]} />\n        <meshPhongMaterial {...material} />\n      </mesh>\n      {markers.map((m) => (\n        <Marker key={`marker-${m.identifier}`} {...m} />\n      ))}\n      {meteors.map((m, i) => (\n        <Meteor key={`meteor-${i}`} {...m} />\n      ))}\n    </Canvas>\n  );\n}\n","import parse from \"csv-parse/lib/sync\";\nimport { Degrees } from \"./geometry\";\nimport { store } from \"./store\";\n\nexport interface CameraData {\n  identifier: string;\n  latitude: Degrees;\n  longitude: Degrees;\n}\n\nexport async function loadCameras(url: string): Promise<CameraData[]> {\n  const response = await fetch(url);\n  if (response.ok) {\n    const csv = await response.text();\n    // console.info(\"cameras csv\", csv);\n\n    const records = parse(csv, { columns: true });\n    return records.map((r: any) => ({\n      identifier: r.camera_id,\n      latitude: r.obs_latitude,\n      longitude: r.obs_longitude,\n    }));\n  } else return Promise.reject(response.statusText);\n}\n\nexport function initCameras() {\n  loadCameras(\"/meteor-globe/data/cameradetails.csv\")\n    .then((cameras) => {\n      console.info(\"[cameras]\", cameras);\n      store.update((s) => {\n        const m = s.markers;\n        for (const c of cameras) {\n          m.set(c.identifier, { ...c, label: c.identifier });\n        }\n      });\n    })\n    .catch((e) => {\n      console.error(\"[cameras] load failed\", e);\n    });\n}\n","import fetchline from \"fetchline\";\n\nimport { store } from \"./store\";\n\nexport interface MeteorData {}\n\nexport function initMeteors() {\n  loadMeteors(\n    \"/meteor-globe/data/traj_summary_20210812_solrange_140.0-141.0.txt\"\n  ).catch((e) => {\n    console.error(\"[meteors] load failed\", e);\n  });\n}\n\n// column indices\n// +/-  ;   RAapp  ;   +/-  ;   DECapp ;   +/-  ;  Azim +E ;   +/-  ;    Elev  ;   +/-  ;\n//   Vinit  ;    +/- ;    Vavg  ;    +/- ;\n//    LatBeg   ;   +/-  ;    LonBeg   ;   +/-  ;   HtBeg ;   +/-  ;    LatEnd   ;   +/-  ;    LonEnd   ;   +/-  ;   HtEnd ;   +/-  ; Duration;  Peak ;  Peak Ht;   F  ;  Mass kg;\nconst BEGIN_UTC_TIME = 1;\nconst IAU_CODE = 3;\nconst BEGIN_LATITUDE = 60;\nconst BEGIN_LONGITUDE = 62;\nconst BEGIN_HEIGHT = 64;\nconst END_LATITUDE = 66;\nconst END_LONGITUDE = 68;\nconst END_HEIGHT = 70;\nconst DURATION = 72;\nconst PEAK_HEIGHT = 74;\nconst MASS = 76;\nconst STATION_CODES = 82;\n\nasync function loadMeteors(url: string) {\n  for await (let line of fetchline(url)) {\n    if (line.length === 0) continue;\n    if (line[0] === \"\\r\") line = line.slice(1); // fetchline bug?\n    if (line[0] === \"#\") continue; // comment, probably column headers\n\n    const fields = line.split(\";\");\n\n    const s = (i: number): string => {\n      const f = fields[i];\n      return f ? f.trim() : \"\";\n    };\n\n    const f = (i: number): number => {\n      return parseFloat(s(i));\n    };\n\n    const beginUTC = s(BEGIN_UTC_TIME);\n    const showerCode = s(IAU_CODE);\n    const beginLatitude = f(BEGIN_LATITUDE);\n    const beginLongitude = f(BEGIN_LONGITUDE);\n    const beginHeight = f(BEGIN_HEIGHT);\n    const mass = f(MASS);\n    const stationCodes = s(STATION_CODES);\n\n    if (stationCodes.includes(\"UK\")) {\n      console.info(\n        beginUTC,\n        showerCode,\n        beginLatitude,\n        beginLongitude,\n        beginHeight,\n        mass,\n        stationCodes\n      );\n      store.update((s) => {\n        s.meteors.push({ beginLatitude, beginLongitude, beginHeight });\n      });\n    }\n  }\n}\n","import { useEffect } from \"react\";\n\nimport { Globe } from \"./Globe\";\nimport \"./App.css\";\n\nimport { store } from \"./store\";\nimport { initCameras } from \"./cameras\";\nimport { initMeteors } from \"./meteors\";\n\nfunction App() {\n  const markers = store.useState((s) => s.markers);\n  const meteors = store.useState((s) => s.meteors);\n\n  useEffect(initCameras, []);\n  useEffect(initMeteors, []);\n\n  return (\n    <div className=\"App\">\n      <Globe markers={[...markers.values()]} meteors={meteors} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <React.Suspense fallback={<div>Loading... </div>}>\n      <App />\n    </React.Suspense>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}