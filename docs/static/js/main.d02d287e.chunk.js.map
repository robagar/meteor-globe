{"version":3,"sources":["geometry.ts","Marker.tsx","Globe.tsx","store.ts","App.tsx","index.tsx"],"names":["EARTH_RADIUS","radians","degrees","Math","PI","position","latitude","longitude","altitude","lat","long","r","cos","sin","Marker","props","radius","label","labelSize","args","Billboard","Text","anchorX","anchorY","fontSize","color","Globe","markers","camera","fov","near","far","material","useTexture","map","bumpMap","specularMap","frameloop","OrbitControls","intensity","m","store","Store","App","useState","s","className","ReactDOM","render","StrictMode","Suspense","fallback","document","getElementById"],"mappings":"gPAAaA,EAAmB,QAMzB,SAASC,EAAQC,GACtB,OAAQC,KAAKC,GAAKF,EAAW,IAKxB,SAASG,EACdC,EACAC,EACAC,GAEA,IAAMC,EAAMR,EAAQK,GACdI,EAAOT,EAAQM,GACfI,EAAIH,EAAWR,EAIrB,MAAO,CAHGW,EAAIR,KAAKS,IAAIH,GAAON,KAAKS,KAAKF,GAC9BC,EAAIR,KAAKU,IAAIJ,GACbE,EAAIR,KAAKS,IAAIH,GAAON,KAAKU,KAAKH,I,4BCVnC,SAASI,EAAOC,GACrB,IACET,EAMES,EANFT,SACAC,EAKEQ,EALFR,UAFF,EAOIQ,EAJFP,gBAHF,MAGa,EAHb,IAOIO,EAHFC,cAJF,MAIW,EAJX,EAKEC,EAEEF,EAFFE,MALF,EAOIF,EADFG,iBANF,MAMc,GANd,EAQA,OACE,qCACE,sBAAMb,SAAUA,EAASC,EAAUC,EAAWC,GAA9C,SACE,gCAAgBW,KAAM,CAACH,EAAQ,GAAI,QAEpCC,GACC,cAACG,EAAA,EAAD,CAAWf,SAAUA,EAASC,EAAUC,EAAWC,EAAW,IAA9D,SACE,cAACa,EAAA,EAAD,CAAMC,QAAQ,OAAOC,QAAQ,MAAMC,SAAUN,EAAWO,MAAM,QAA9D,SACGR,SClBN,SAASS,EAAMX,GACpB,IAAQY,EAAYZ,EAAZY,QAEFC,EAAS,CACbC,IAAK,GACLC,KAAM,GACNC,IAAK,IACL1B,SAAUA,EAAS,GAAI,EAAG,MAEtB2B,EAAWC,YAAW,CAC1BC,IAAK,+BACLC,QAAS,6BACTC,YAAa,0BAEf,OACE,eAAC,IAAD,CAAQC,UAAU,SAAST,OAAQA,EAAnC,UACE,cAACU,EAAA,EAAD,IAEA,8BAAcC,UAAW,KACzB,kCAAkBd,MAAM,QAAQpB,SAAUA,EAAS,EAAG,EAAG,KACzD,iCACE,gCAAgBc,KAAM,CAACnB,EAAc,IAAK,OAC1C,iDAAuBgC,OAExBL,GAAWA,EAAQO,KAAI,SAACM,GAAD,OAAO,cAAC1B,EAAD,eAAY0B,U,UCjCpCC,EAAQ,I,MAAIC,GAAM,CAC3Bf,QAAS,CAAC,CAAErB,SAAU,UAAWC,WAAY,SAAUU,MAAO,aCYnD0B,MAVf,WACE,IAAMhB,EAAUc,EAAMG,UAAS,SAACC,GAAD,OAAOA,EAAElB,WAExC,OACE,qBAAKmB,UAAU,MAAf,SACE,cAACpB,EAAD,CAAOC,QAASA,OCLtBoB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAMC,SAAP,CAAgBC,SAAU,8CAA1B,SACE,cAAC,EAAD,QAGJC,SAASC,eAAe,W","file":"static/js/main.d02d287e.chunk.js","sourcesContent":["export const EARTH_RADIUS: Km = 6371.37;\n\nexport type Radians = number;\nexport type Degrees = number;\nexport type Km = number;\n\nexport function radians(degrees: Degrees): Radians {\n  return (Math.PI * degrees) / 180;\n}\n\nexport type XYZ = [number, number, number];\n\nexport function position(\n  latitude: Degrees,\n  longitude: Degrees,\n  altitude: Km\n): XYZ {\n  const lat = radians(latitude);\n  const long = radians(longitude);\n  const r = altitude + EARTH_RADIUS;\n  const x = r * Math.cos(lat) * Math.cos(-long);\n  const y = r * Math.sin(lat);\n  const z = r * Math.cos(lat) * Math.sin(-long);\n  return [x, y, z];\n}\n","import { Billboard, Text } from \"@react-three/drei\";\nimport { Degrees, Km, position } from \"./geometry\";\n\nexport interface MarkerProps {\n  latitude: Degrees;\n  longitude: Degrees;\n  altitude?: Km;\n  radius?: Km;\n  label?: string;\n  labelSize?: Km;\n}\n\nexport function Marker(props: MarkerProps) {\n  const {\n    latitude,\n    longitude,\n    altitude = 0,\n    radius = 5,\n    label,\n    labelSize = 50,\n  } = props;\n  return (\n    <>\n      <mesh position={position(latitude, longitude, altitude)}>\n        <sphereGeometry args={[radius, 16, 16]} />\n      </mesh>\n      {label && (\n        <Billboard position={position(latitude, longitude, altitude + 10)}>\n          <Text anchorX=\"left\" anchorY=\"top\" fontSize={labelSize} color=\"white\">\n            {label}\n          </Text>\n        </Billboard>\n      )}\n    </>\n  );\n}\n","import { Canvas } from \"@react-three/fiber\";\nimport { useTexture, OrbitControls } from \"@react-three/drei\";\n\nimport { EARTH_RADIUS, position } from \"./geometry\";\n\nimport { Marker, MarkerProps } from \"./Marker\";\n\nexport interface GlobeProps {\n  markers?: MarkerProps[];\n}\n\nexport function Globe(props: GlobeProps) {\n  const { markers } = props;\n\n  const camera = {\n    fov: 75,\n    near: 10,\n    far: 100000,\n    position: position(52, 0, 5000),\n  };\n  const material = useTexture({\n    map: \"textures/2_no_clouds_4k.jpeg\",\n    bumpMap: \"textures/elev_bump_4k.jpeg\",\n    specularMap: \"textures/water_4k.png\",\n  });\n  return (\n    <Canvas frameloop=\"demand\" camera={camera}>\n      <OrbitControls />\n      {/* <axesHelper args={[10000]} /> */}\n      <ambientLight intensity={0.1} />\n      <directionalLight color=\"white\" position={position(0, 0, 1)} />\n      <mesh>\n        <sphereGeometry args={[EARTH_RADIUS, 128, 128]} />\n        <meshPhongMaterial {...material} />\n      </mesh>\n      {markers && markers.map((m) => <Marker {...m} />)}\n    </Canvas>\n  );\n}\n","import { Store } from \"pullstate\";\n\nexport const store = new Store({\n    markers: [{ latitude: 50.224871, longitude: -4.949858, label: \"UK003C\" }],\n});\n","import { Globe } from \"./Globe\";\nimport \"./App.css\";\n\nimport { store } from \"./store\";\n\nfunction App() {\n  const markers = store.useState((s) => s.markers);\n\n  return (\n    <div className=\"App\">\n      <Globe markers={markers} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <React.Suspense fallback={<div>Loading... </div>}>\n      <App />\n    </React.Suspense>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}