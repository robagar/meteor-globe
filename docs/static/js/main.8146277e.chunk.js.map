{"version":3,"sources":["geometry.ts","store.ts","Marker.tsx","Meteor.tsx","BillboardTest.tsx","Globe.tsx","cameras.ts","meteors.ts","App.tsx","index.tsx"],"names":["EARTH_RADIUS","radians","degrees","Math","PI","position","latitude","longitude","altitude","lat","long","r","cos","sin","xyz","point","height","enableMapSet","store","Store","highlightedMarker","markers","Map","identifier","label","meteors","Marker","props","radius","labelSize","highlighted","useState","s","setHighlighted","update","onPointerOver","e","onPointerOut","args","visible","color","Billboard","Text","anchorX","anchorY","fontSize","Meteor","begin","end","tail","head","tx","ty","tz","center","cx","cy","cz","Vector3","vector","length","direction","clone","normalize","ref","useRef","useFrame","camera","view","sub","perp","cross","up","right","mesh","current","m","Matrix4","xAxis","yAxis","zAxis","makeBasis","quaternion","setFromRotationMatrix","BillboardTest","Globe","fov","near","far","material","useTexture","map","bumpMap","specularMap","frameloop","OrbitControls","minDistance","zoomSpeed","rotateSpeed","intensity","i","url","a","fetch","response","ok","text","csv","records","parse","columns","camera_id","obs_latitude","obs_longitude","Promise","reject","statusText","initCameras","loadCameras","then","cameras","console","info","c","set","catch","error","initMeteors","async","line","slice","fields","split","f","trim","parseFloat","beginUTC","showerCode","mass","stationCodes","push","fetchline","loadMeteors","App","useEffect","className","values","ReactDOM","render","StrictMode","Suspense","fallback","document","getElementById"],"mappings":"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","file":"static/js/main.8146277e.chunk.js","sourcesContent":["export const EARTH_RADIUS: Km = 6371.37;\n\nexport type Radians = number;\nexport type Degrees = number;\nexport type Km = number;\n\nexport type LatLongHt = {\n  latitude: Degrees;\n  longitude: Degrees;\n  height: Km;\n};\n\nexport function radians(degrees: Degrees): Radians {\n  return (Math.PI * degrees) / 180;\n}\n\nexport type XYZ = [number, number, number];\n\nexport function position(\n  latitude: Degrees,\n  longitude: Degrees,\n  altitude: Km\n): XYZ {\n  const lat = radians(latitude);\n  const long = radians(longitude);\n  const r = altitude + EARTH_RADIUS;\n  const x = r * Math.cos(lat) * Math.cos(-long);\n  const y = r * Math.sin(lat);\n  const z = r * Math.cos(lat) * Math.sin(-long);\n  return [x, y, z];\n}\n\nexport function xyz(point: LatLongHt): XYZ {\n  const { latitude, longitude, height } = point;\n  const lat = radians(latitude);\n  const long = radians(longitude);\n  const r = EARTH_RADIUS + height;\n  const x = r * Math.cos(lat) * Math.cos(-long);\n  const y = r * Math.sin(lat);\n  const z = r * Math.cos(lat) * Math.sin(-long);\n  return [x, y, z];\n}\n","import { Store } from \"pullstate\";\nimport { enableMapSet } from \"immer\";\n\nimport { MarkerProps } from \"./Marker\";\nimport { MeteorProps } from \"./Meteor\";\n\nenableMapSet();\n\nexport const store = new Store({\n    highlightedMarker: \"\",\n    markers: new Map<string, MarkerProps>([\n        [\n            \"UK003C\",\n            {\n                identifier: \"UK003C\",\n                latitude: 50.224871,\n                longitude: -4.949858,\n                label: \"UK003C\",\n            },\n        ],\n    ]),\n    meteors: [] as MeteorProps[],\n});\n","import { Billboard, Text } from \"@react-three/drei\";\nimport { Degrees, Km, position } from \"./geometry\";\nimport { store } from \"./store\";\n\nexport interface MarkerProps {\n  identifier: string;\n  latitude: Degrees;\n  longitude: Degrees;\n  altitude?: Km;\n  radius?: Km;\n  label?: string;\n  labelSize?: Km;\n}\n\nexport function Marker(props: MarkerProps) {\n  const {\n    identifier,\n    latitude,\n    longitude,\n    altitude = 5,\n    radius = 5,\n    label,\n    labelSize = 50,\n  } = props;\n\n  const highlighted = store.useState((s) => s.highlightedMarker) === identifier;\n  const setHighlighted = (highlighted: boolean) => {\n    if (highlighted) {\n      store.update((s) => {\n        s.highlightedMarker = identifier;\n      });\n    } else {\n      store.update((s) => {\n        if (s.highlightedMarker === identifier) s.highlightedMarker = \"\";\n      });\n    }\n  };\n\n  return (\n    <>\n      <mesh\n        onPointerOver={(e) => setHighlighted(true)}\n        onPointerOut={(e) => setHighlighted(false)}\n        position={position(latitude, longitude, altitude)}\n      >\n        <sphereGeometry args={[radius * 4, 8, 8]} />\n        <meshBasicMaterial visible={false} />\n      </mesh>\n      <mesh position={position(latitude, longitude, altitude)}>\n        <sphereGeometry args={[radius, 16, 16]} />\n        <meshBasicMaterial color=\"hotpink\" />\n      </mesh>\n      {label && (\n        <Billboard\n          visible={highlighted}\n          position={position(latitude, longitude, altitude + 10)}\n        >\n          <Text anchorX=\"left\" anchorY=\"top\" fontSize={labelSize} color=\"white\">\n            {label}\n          </Text>\n        </Billboard>\n      )}\n    </>\n  );\n}\n","import { useRef } from \"react\";\nimport { Mesh, Vector3, Quaternion, Matrix4 } from \"three\";\nimport { useFrame } from \"@react-three/fiber\";\n\nimport { LatLongHt, xyz, XYZ } from \"./geometry\";\n\nexport interface MeteorProps {\n  begin: LatLongHt;\n  end: LatLongHt;\n}\n\nexport function Meteor(props: MeteorProps) {\n  const { begin, end } = props;\n\n  const tail = xyz(begin);\n  const head = xyz(end);\n\n  const [tx, ty, tz] = tail;\n  const [hx, hy, hz] = head;\n\n  const center: XYZ = [(tx + hx) / 2, (ty + hy) / 2, (tz + hz) / 2];\n  const [cx, cy, cz] = center;\n  const position = new Vector3(cx, cy, cz);\n\n  const vector = new Vector3(\n    head[0] - tail[0],\n    head[1] - tail[1],\n    head[2] - tail[2]\n  );\n  const length = vector.length();\n  const width = 3;\n  const direction = vector.clone();\n  direction.normalize();\n  // console.info(direction);\n\n  const ref = useRef<Mesh>();\n\n  useFrame(({ camera }) => {\n    const view = position.clone();\n    view.sub(camera.position).normalize();\n    const perp = direction.clone();\n    perp.cross(view).normalize();\n    const up = direction.clone();\n    up.cross(perp).normalize();\n    const right = direction.clone().cross(up);\n\n    // console.info(\"position\", position);\n    // console.info(\"direction\", direction);\n\n    // console.info(\"camera\", camera.position);\n    // console.info(\"view\", view);\n    // console.info(\"right\", right);\n    // console.info(\"up\", up);\n\n    // console.info(direction.dot(right), direction.dot(up), right.dot(up));\n    // console.info(direction.length(), up.length(), right.length());\n\n    const mesh = ref.current;\n    if (mesh) {\n      const m = new Matrix4();\n      const xAxis = right;\n      const yAxis = direction;\n      const zAxis = up;\n      m.makeBasis(xAxis, yAxis, zAxis);\n      mesh.quaternion.setFromRotationMatrix(m);\n    }\n  });\n\n  return (\n    <>\n      {/*      <mesh position={tail}>\n        <sphereGeometry args={[5, 16, 16]} />\n        <meshBasicMaterial color=\"white\" />\n      </mesh>\n*/}\n      <mesh ref={ref} position={center}>\n        {/*        <axesHelper args={[100]} /> */}\n        <planeGeometry args={[width, length]} />\n        <meshBasicMaterial color=\"white\" />\n      </mesh>\n      {/*      <mesh position={head}>\n        <sphereGeometry args={[5, 16, 16]} />\n        <meshBasicMaterial color=\"orange\" />\n      </mesh>\n*/}\n    </>\n  );\n}\n\n// function setQuaternion(\n//   forward: Vector3,\n//   right: Vector3,\n//   up: Vector3,\n//   q: Quaternion\n// ) {\n//   const m00 = right.x;\n//   const m01 = up.x;\n//   const m02 = forward.x;\n//   const m10 = right.y;\n//   const m11 = up.y;\n//   const m12 = forward.y;\n//   const m20 = right.z;\n//   const m21 = up.z;\n//   const m22 = forward.z;\n\n//   const w = Math.sqrt(1 + m00 + m11 + m22) / 2;\n//   const r = 1 / (4 * w);\n//   const x = (m21 - m12) * r;\n//   const y = (m02 - m20) * r;\n//   const z = (m10 - m01) * r;\n\n//   q.set(x, y, z, w);\n//   q.normalize();\n// }\n","import { useRef } from \"react\";\nimport { Mesh, Vector3, Quaternion, Matrix4 } from \"three\";\nimport { useFrame } from \"@react-three/fiber\";\n\nexport function BillboardTest() {\n  const ref = useRef<Mesh>();\n\n  const direction = new Vector3(0, 1, 0);\n  const position = new Vector3(0, 0, 0);\n\n  useFrame(({ camera }) => {\n    const view = position.clone();\n    view.sub(camera.position).normalize();\n    // const view = new Vector3(-1, 0, 0);\n    const perp = direction.clone();\n    perp.cross(view).normalize();\n    const up = direction.clone();\n    up.cross(perp).normalize();\n    const right = direction.clone().cross(up);\n\n    // console.info(\"position\", position);\n    // console.info(\"direction\", direction);\n\n    // console.info(\"camera\", camera.position);\n    // console.info(\"view\", view);\n    // console.info(\"right\", right);\n    // console.info(\"up\", up);\n\n    // console.info(direction.dot(right), direction.dot(up), right.dot(up));\n    // console.info(direction.length(), up.length(), right.length());\n\n    const mesh = ref.current;\n    if (mesh) {\n      const m = new Matrix4();\n      // m.makeBasis(right, direction, up);\n      //direction, right, up\n      const xAxis = right;\n      const yAxis = direction;\n      const zAxis = up;\n      m.makeBasis(xAxis, yAxis, zAxis);\n      // console.info(m);\n      mesh.quaternion.setFromRotationMatrix(m);\n    }\n  });\n\n  return (\n    <>\n      <mesh ref={ref}>\n        <axesHelper args={[3000]} />\n        <planeGeometry args={[2000, 5000]} />\n        <meshBasicMaterial color=\"blue\" />\n      </mesh>\n    </>\n  );\n}\n","import { Canvas } from \"@react-three/fiber\";\nimport { useTexture, OrbitControls } from \"@react-three/drei\";\n\nimport { EARTH_RADIUS, position } from \"./geometry\";\n\nimport { Marker, MarkerProps } from \"./Marker\";\nimport { Meteor, MeteorProps } from \"./Meteor\";\n\nimport { BillboardTest } from \"./BillboardTest\";\n\nexport interface GlobeProps {\n  markers: MarkerProps[];\n  meteors: MeteorProps[];\n}\n\nconst MIN_CAMERA_ALTITUDE = 100;\n\nexport function Globe(props: GlobeProps) {\n  const { markers, meteors } = props;\n\n  const camera = {\n    fov: 75,\n    near: 10,\n    far: 100000,\n    position: position(50.22, -4.95, 3000),\n  };\n  const material = useTexture({\n    map: \"/meteor-globe/textures/2_no_clouds_4k.jpeg\",\n    bumpMap: \"/meteor-globe/textures/elev_bump_4k.jpeg\",\n    specularMap: \"/meteor-globe/textures/water_4k.png\",\n  });\n  return (\n    <Canvas frameloop=\"demand\" camera={camera}>\n      <OrbitControls\n        minDistance={EARTH_RADIUS + MIN_CAMERA_ALTITUDE}\n        zoomSpeed={1}\n        rotateSpeed={1}\n      />\n      {/*<axesHelper args={[5000]} />*/}\n      <ambientLight intensity={0.1} />\n      <directionalLight color=\"white\" position={position(0, 0, 1)} />\n      <BillboardTest />\n\n      <mesh>\n        <sphereGeometry args={[EARTH_RADIUS, 128, 128]} />\n        <meshPhongMaterial {...material} />\n      </mesh>\n\n      {markers.map((m) => (\n        <Marker key={`marker-${m.identifier}`} {...m} />\n      ))}\n      {meteors.map((m, i) => (\n        <Meteor key={`meteor-${i}`} {...m} />\n      ))}\n    </Canvas>\n  );\n}\n","import parse from \"csv-parse/lib/sync\";\nimport { Degrees } from \"./geometry\";\nimport { store } from \"./store\";\n\nexport interface CameraData {\n  identifier: string;\n  latitude: Degrees;\n  longitude: Degrees;\n}\n\nexport async function loadCameras(url: string): Promise<CameraData[]> {\n  const response = await fetch(url);\n  if (response.ok) {\n    const csv = await response.text();\n    // console.info(\"cameras csv\", csv);\n\n    const records = parse(csv, { columns: true });\n    return records.map((r: any) => ({\n      identifier: r.camera_id,\n      latitude: r.obs_latitude,\n      longitude: r.obs_longitude,\n    }));\n  } else return Promise.reject(response.statusText);\n}\n\nexport function initCameras() {\n  loadCameras(\"/meteor-globe/data/cameradetails.csv\")\n    .then((cameras) => {\n      console.info(\"[cameras]\", cameras);\n      store.update((s) => {\n        const m = s.markers;\n        for (const c of cameras) {\n          m.set(c.identifier, { ...c, label: c.identifier });\n        }\n      });\n    })\n    .catch((e) => {\n      console.error(\"[cameras] load failed\", e);\n    });\n}\n","import fetchline from \"fetchline\";\n\nimport { store } from \"./store\";\nimport { MeteorProps } from \"./Meteor\";\n\nexport function initMeteors() {\n  loadMeteors(\n    \"https://globalmeteornetwork.org/data/traj_summary_data/daily/traj_summary_yesterday.txt\"\n    // \"/meteor-globe/data/traj_summary_20210812_solrange_140.0-141.0.txt\"\n    // \"/meteor-globe/data/one_perseid.txt\"\n  ).catch((e) => {\n    console.error(\"[meteors] load failed\", e);\n  });\n}\n\n// column indices\nconst BEGIN_UTC_TIME = 1;\nconst IAU_CODE = 3;\nconst BEGIN_LATITUDE = 60;\nconst BEGIN_LONGITUDE = 62;\nconst BEGIN_HEIGHT = 64;\nconst END_LATITUDE = 66;\nconst END_LONGITUDE = 68;\nconst END_HEIGHT = 70;\nconst DURATION = 72;\nconst PEAK_HEIGHT = 74;\nconst MASS = 76;\nconst STATION_CODES = 82;\n\nconst NUM_COLUMNS = 83;\n\nasync function loadMeteors(url: string) {\n  const meteors: MeteorProps[] = [];\n  for await (let line of fetchline(url)) {\n    if (line.length === 0) continue;\n    if (line[0] === \"\\r\") line = line.slice(1); // fetchline bug?\n    if (line[0] === \"#\") continue; // comment, probably column headers\n\n    const fields = line.split(\";\");\n    if (fields.length !== NUM_COLUMNS) continue;\n\n    const s = (i: number): string => {\n      const f = fields[i];\n      return f ? f.trim() : \"\";\n    };\n\n    const f = (i: number): number => {\n      return parseFloat(s(i));\n    };\n\n    const beginUTC = s(BEGIN_UTC_TIME);\n    const showerCode = s(IAU_CODE);\n    const begin = {\n      latitude: f(BEGIN_LATITUDE),\n      longitude: f(BEGIN_LONGITUDE),\n      height: f(BEGIN_HEIGHT),\n    };\n    const end = {\n      latitude: f(END_LATITUDE),\n      longitude: f(END_LONGITUDE),\n      height: f(END_HEIGHT),\n    };\n    const mass = f(MASS);\n    const stationCodes = s(STATION_CODES);\n\n    // if (stationCodes.includes(\"UK\")) {\n    console.info(beginUTC, showerCode, begin, end, mass, stationCodes);\n    meteors.push({ begin, end });\n    // }\n  }\n\n  store.update((s) => {\n    s.meteors = meteors;\n  });\n}\n","import { useEffect } from \"react\";\n\nimport { Globe } from \"./Globe\";\nimport \"./App.css\";\n\nimport { store } from \"./store\";\nimport { initCameras } from \"./cameras\";\nimport { initMeteors } from \"./meteors\";\n\nfunction App() {\n  const markers = store.useState((s) => s.markers);\n  const meteors = store.useState((s) => s.meteors);\n\n  useEffect(initCameras, []);\n  useEffect(initMeteors, []);\n\n  return (\n    <div className=\"App\">\n      <Globe markers={[...markers.values()]} meteors={meteors} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <React.Suspense fallback={<div>Loading... </div>}>\n      <App />\n    </React.Suspense>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}