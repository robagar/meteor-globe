{"version":3,"sources":["geometry.ts","MeteorTooltip.tsx","InstancedMeteors.tsx","Globe.tsx","store.ts","cameras.ts","meteors.ts","App.tsx","index.tsx"],"names":["EARTH_RADIUS","radians","degrees","Math","PI","position","latitude","longitude","altitude","lat","long","r","cos","sin","xyz","point","height","MeteorTooltip","props","meteor","showerCode","beginTime","magnitude","duration","stationCodes","className","join","DEFAULT_COLOR","Color","HIGHLIGHTED_COLOR","InstancedMeteors","data","ref","useRef","useFrame","camera","mesh","current","i","index","setMatrixAt","buildMeteorMatrix","setColorAt","hoverInstanceIdRef","instanceMatrix","needsUpdate","instanceColor","useState","undefined","hover","setHover","length","args","onPointerOver","e","instanceId","onPointerOut","vertexShader","fragmentShader","transparent","depthWrite","Html","calculatePosition","el","size","getIndex","parent","InstancedMesh","getMatrixAt","m","copy","matrixWorld","objectPos","v1","setFromMatrixPosition","project","widthHalf","width","heightHalf","x","y","calculateTooltipPosition","Vector3","Matrix4","cameraPosition","begin","end","brightness","tail","head","tx","ty","tz","center","cx","cy","cz","vector","max","direction","clone","normalize","view","sub","perp","cross","up","right","rotation","xAxis","yAxis","zAxis","makeBasis","quaternion","Quaternion","setFromRotationMatrix","scale","compose","Globe","meteors","fov","near","far","material","useTexture","map","bumpMap","specularMap","frameloop","OrbitControls","minDistance","maxDistance","zoomSpeed","rotateSpeed","intensity","color","enableMapSet","store","Store","highlightedMarker","markers","Map","identifier","label","url","a","fetch","response","ok","text","csv","records","parse","columns","camera_id","obs_latitude","obs_longitude","Promise","reject","statusText","initCameras","loadCameras","then","cameras","console","info","update","s","c","set","catch","error","initMeteors","params","async","nextIndex","line","slice","fields","split","f","trim","parseFloat","peakHeight","mass","push","fetchline","fetchMeteorData","test","get","meteorDataUrl","App","queryParams","URLSearchParams","window","location","search","useEffect","values","ReactDOM","render","StrictMode","Suspense","fallback","document","getElementById"],"mappings":"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","file":"static/js/main.6f71707e.chunk.js","sourcesContent":["export const EARTH_RADIUS: Km = 6371.37;\n\nexport type Radians = number;\nexport type Degrees = number;\nexport type Km = number;\n\nexport type LatLongHt = {\n  latitude: Degrees;\n  longitude: Degrees;\n  height: Km;\n};\n\nexport function radians(degrees: Degrees): Radians {\n  return (Math.PI * degrees) / 180;\n}\n\nexport type XYZ = [number, number, number];\n\nexport function position(\n  latitude: Degrees,\n  longitude: Degrees,\n  altitude: Km\n): XYZ {\n  const lat = radians(latitude);\n  const long = radians(longitude);\n  const r = altitude + EARTH_RADIUS;\n  const x = r * Math.cos(lat) * Math.cos(-long);\n  const y = r * Math.sin(lat);\n  const z = r * Math.cos(lat) * Math.sin(-long);\n  return [x, y, z];\n}\n\nexport function xyz(point: LatLongHt): XYZ {\n  const { latitude, longitude, height } = point;\n  const lat = radians(latitude);\n  const long = radians(longitude);\n  const r = EARTH_RADIUS + height;\n  const x = r * Math.cos(lat) * Math.cos(-long);\n  const y = r * Math.sin(lat);\n  const z = r * Math.cos(lat) * Math.sin(-long);\n  return [x, y, z];\n}\n","import { MeteorData } from \"./meteors\";\nimport \"./MeteorTooltip.css\";\n\nexport interface MeteorTooltipProps {\n  meteor: MeteorData;\n}\n\nexport function MeteorTooltip(props: MeteorTooltipProps) {\n  const { meteor } = props;\n  const { showerCode, beginTime, magnitude, duration, stationCodes } = meteor;\n\n  return (\n    <div className=\"root\">\n      <div className=\"shower\">{showerCode}</div>\n      <div className=\"beginTime\">{beginTime}</div>\n      <div className=\"magnitude\">Mag {magnitude}</div>\n      <div className=\"duration\">{duration}s</div>\n\n      <div className=\"stationCodes\">{stationCodes.join(\", \")}</div>\n    </div>\n  );\n}\n","import { useRef, useState } from \"react\";\nimport {\n  Matrix4,\n  Vector3,\n  Quaternion,\n  InstancedMesh,\n  Color,\n  Object3D,\n  Camera,\n} from \"three\";\nimport { useFrame } from \"@react-three/fiber\";\nimport { Html } from \"@react-three/drei\";\n\nimport { xyz, XYZ } from \"./geometry\";\nimport { MeteorData } from \"./meteors\";\nimport { MeteorTooltip } from \"./MeteorTooltip\";\n\nconst MIN_WIDTH = 0.1;\nconst MAG_ZERO_WIDTH = 2;\n\nconst DEFAULT_COLOR = new Color(1, 1, 1);\nconst HIGHLIGHTED_COLOR = new Color(1.0, 0.27, 0.71); // CSS hotpink #FF69B4\n\nexport interface InstancedMeteorsProps {\n  data: MeteorData[];\n}\n\nexport function InstancedMeteors(props: InstancedMeteorsProps) {\n  const { data } = props;\n\n  const vertexShader = `\n    varying vec2 vUv;\n    varying vec3 vColor;\n\n    void main() {\n      vUv = uv;\n      vColor = instanceColor;\n      gl_Position = projectionMatrix * modelViewMatrix * instanceMatrix * vec4(position,1.0);\n    }\n  `;\n\n  const fragmentShader = `\n    varying vec2 vUv;\n    varying vec3 vColor;\n\n    void main() {\n      float x = vUv.x;\n      float y = vUv.y;\n      float c = (x < 0.5 ? x : (1.0 - x)) * 2.0;\n      float p = 0.75;\n      float l = y < p ? (y / p) : (1.0 - y) / (1.0 - p);\n      float opacity = c * l;\n      gl_FragColor = vec4(vColor, opacity);\n    }\n  `;\n\n  const ref = useRef<InstancedMesh>();\n  useFrame(({ camera }) => {\n    // console.info(\"frame!\", data.length);\n    const mesh = ref.current;\n    if (mesh) {\n      for (const meteor of data) {\n        const i = meteor.index;\n        mesh.setMatrixAt(i, buildMeteorMatrix(meteor, camera.position));\n        mesh.setColorAt(\n          i,\n          i === hoverInstanceIdRef.current ? HIGHLIGHTED_COLOR : DEFAULT_COLOR\n        );\n      }\n      mesh.instanceMatrix.needsUpdate = true;\n      if (mesh.instanceColor) mesh.instanceColor.needsUpdate = true;\n    }\n  });\n\n  const [hover, setHover] = useState<MeteorData | undefined>(undefined);\n  const hoverInstanceIdRef = useRef<number | undefined>();\n\n  return (\n    <>\n      {data.length && (\n        <instancedMesh\n          ref={ref}\n          args={[undefined, undefined, data.length]}\n          onPointerOver={(e) => {\n            const i = e.instanceId;\n            if (i !== undefined) {\n              setHover(data[i]);\n              if (hoverInstanceIdRef.current !== i) {\n                hoverInstanceIdRef.current = i;\n              }\n            }\n          }}\n          onPointerOut={(e) => {\n            setHover(undefined);\n            if (hoverInstanceIdRef.current === e.instanceId) {\n              hoverInstanceIdRef.current = undefined;\n            }\n          }}\n        >\n          <planeGeometry args={[1, 1]} />\n          <shaderMaterial\n            vertexShader={vertexShader}\n            fragmentShader={fragmentShader}\n            transparent={true}\n            depthWrite={false}\n          />\n\n          {hover && (\n            <Html\n              calculatePosition={(el, camera, size) =>\n                calculateTooltipPosition(\n                  el,\n                  camera,\n                  size,\n                  () => hoverInstanceIdRef.current\n                )\n              }\n            >\n              <MeteorTooltip meteor={hover} />\n            </Html>\n          )}\n        </instancedMesh>\n      )}\n    </>\n  );\n}\n\nconst v1 = new Vector3();\nconst m = new Matrix4();\nfunction calculateTooltipPosition(\n  el: Object3D,\n  camera: Camera,\n  size: { width: number; height: number },\n  getIndex: () => number | undefined\n) {\n  const index = getIndex();\n\n  if (el.parent instanceof InstancedMesh && index !== undefined) {\n    el.parent.getMatrixAt(index, m);\n  } else {\n    m.copy(el.matrixWorld);\n  }\n  const objectPos = v1.setFromMatrixPosition(m);\n  objectPos.project(camera);\n  const widthHalf = size.width / 2;\n  const heightHalf = size.height / 2;\n  return [\n    objectPos.x * widthHalf + widthHalf,\n    -(objectPos.y * heightHalf) + heightHalf,\n  ];\n}\n\nfunction buildMeteorMatrix(\n  meteor: MeteorData,\n  cameraPosition: Vector3\n): Matrix4 {\n  const {\n    // beginTime,\n    // showerCode,\n    begin,\n    end,\n    magnitude,\n    // duration,\n    // stationCodes,\n  } = meteor;\n\n  const brightness = 1 - magnitude * 0.2;\n\n  const tail = xyz(begin);\n  const head = xyz(end);\n\n  const [tx, ty, tz] = tail;\n  const [hx, hy, hz] = head;\n\n  const center: XYZ = [(tx + hx) / 2, (ty + hy) / 2, (tz + hz) / 2];\n  const [cx, cy, cz] = center;\n  const position = new Vector3(cx, cy, cz);\n\n  const vector = new Vector3(\n    head[0] - tail[0],\n    head[1] - tail[1],\n    head[2] - tail[2]\n  );\n  const length = vector.length();\n  const width = Math.max(MIN_WIDTH, MAG_ZERO_WIDTH * brightness);\n  const direction = vector.clone();\n  direction.normalize();\n\n  // build matrix\n\n  const view = position.clone().sub(cameraPosition).normalize();\n  const perp = direction.clone().cross(view).normalize();\n  const up = direction.clone().cross(perp).normalize();\n  const right = direction.clone().cross(up);\n\n  const rotation = new Matrix4();\n  const xAxis = right;\n  const yAxis = direction;\n  const zAxis = up;\n  rotation.makeBasis(xAxis, yAxis, zAxis);\n\n  const quaternion = new Quaternion();\n  quaternion.setFromRotationMatrix(rotation);\n\n  const scale = new Vector3(width, length, 1);\n\n  const m = new Matrix4();\n  m.compose(position, quaternion, scale);\n  return m;\n}\n","import { Canvas } from \"@react-three/fiber\";\nimport { useTexture, OrbitControls } from \"@react-three/drei\";\n\nimport { EARTH_RADIUS, position } from \"./geometry\";\n\nimport { /*Marker, */ MarkerProps } from \"./Marker\";\nimport { MeteorData } from \"./meteors\";\nimport { InstancedMeteors } from \"./InstancedMeteors\";\n\nimport \"./Globe.css\";\n\nexport interface GlobeProps {\n  markers: MarkerProps[];\n  meteors: MeteorData[];\n}\n\nconst MIN_CAMERA_HEIGHT = 200;\nconst MAX_CAMERA_HEIGHT = 10000;\n\nexport function Globe(props: GlobeProps) {\n  const { /*markers,*/ meteors } = props;\n\n  const camera = {\n    fov: 75,\n    near: 10,\n    far: 100000,\n    position: position(50.22, -4.95, 1500),\n  };\n  const material = useTexture({\n    map: \"/meteor-globe/textures/2_no_clouds_4k.jpeg\",\n    bumpMap: \"/meteor-globe/textures/elev_bump_4k.jpeg\",\n    specularMap: \"/meteor-globe/textures/water_4k.png\",\n  });\n  return (\n    <Canvas className=\"globeCanvas\" frameloop=\"demand\" camera={camera}>\n      <OrbitControls\n        minDistance={EARTH_RADIUS + MIN_CAMERA_HEIGHT}\n        maxDistance={EARTH_RADIUS + MAX_CAMERA_HEIGHT}\n        zoomSpeed={0.1}\n        rotateSpeed={0.1}\n      />\n      <ambientLight intensity={0.1} />\n      <directionalLight color=\"white\" position={position(0, 0, 1)} />\n      <mesh>\n        <sphereGeometry args={[EARTH_RADIUS, 128, 128]} />\n        <meshPhongMaterial {...material} />\n      </mesh>\n      {/*      {markers.map((m) => (\n        <Marker key={`marker-${m.identifier}`} {...m} />\n      ))}\n*/}\n      <InstancedMeteors data={meteors} />\n    </Canvas>\n  );\n}\n","import { Store } from \"pullstate\";\nimport { enableMapSet } from \"immer\";\n\nimport { MarkerProps } from \"./Marker\";\nimport { MeteorData } from \"./meteors\";\n\nenableMapSet();\n\nexport const store = new Store({\n    highlightedMarker: \"\",\n    markers: new Map<string, MarkerProps>([\n        [\n            \"UK003C\",\n            {\n                identifier: \"UK003C\",\n                latitude: 50.224871,\n                longitude: -4.949858,\n                label: \"UK003C\",\n            },\n        ],\n    ]),\n    meteors: [] as MeteorData[],\n});\n","import parse from \"csv-parse/lib/sync\";\nimport { Degrees } from \"./geometry\";\nimport { store } from \"./store\";\n\nexport interface CameraData {\n  identifier: string;\n  latitude: Degrees;\n  longitude: Degrees;\n}\n\nexport async function loadCameras(url: string): Promise<CameraData[]> {\n  const response = await fetch(url);\n  if (response.ok) {\n    const csv = await response.text();\n    // console.info(\"cameras csv\", csv);\n\n    const records = parse(csv, { columns: true });\n    return records.map((r: any) => ({\n      identifier: r.camera_id,\n      latitude: r.obs_latitude,\n      longitude: r.obs_longitude,\n    }));\n  } else return Promise.reject(response.statusText);\n}\n\nexport function initCameras() {\n  loadCameras(\"/meteor-globe/data/cameradetails.csv\")\n    .then((cameras) => {\n      console.info(\"[cameras]\", cameras);\n      store.update((s) => {\n        const m = s.markers;\n        for (const c of cameras) {\n          m.set(c.identifier, { ...c, label: c.identifier });\n        }\n      });\n    })\n    .catch((e) => {\n      console.error(\"[cameras] load failed\", e);\n    });\n}\n","import fetchline from \"fetchline\";\n\nimport { store } from \"./store\";\nimport { LatLongHt, Km } from \"./geometry\";\n\nexport const DEFAULT_COLOR = [1, 1, 1];\nexport const HIGHLIGHTED_COLOR = [1.0, 0.27, 0.71]; // CSS hotpink #FF69B4\n\nexport type UTCTime = string;\nexport type ShowerCode = string;\nexport type Seconds = number;\nexport type Magnitude = number;\nexport type Kg = number;\nexport type StationCode = string;\n\nexport interface MeteorData {\n  index: number;\n  beginTime: UTCTime;\n  showerCode: ShowerCode;\n  begin: LatLongHt;\n  end: LatLongHt;\n  peakHeight: Km;\n  magnitude: Magnitude;\n  duration: Seconds;\n  mass: Kg;\n  stationCodes: StationCode[];\n}\n\nfunction meteorDataUrl(params: URLSearchParams) {\n  const test = params.get(\"test\");\n  if (test !== null) {\n    switch (test) {\n      case \"one_perseid\":\n        return \"/meteor-globe/data/one_perseid.txt\";\n      default:\n        return \"/meteor-globe/data/traj_summary_20210812_solrange_140.0-141.0.txt\";\n    }\n  }\n\n  // default to all detected by GMN yesterday\n  return \"https://globalmeteornetwork.org/data/traj_summary_data/daily/traj_summary_yesterday.txt\";\n}\n\nexport function initMeteors(params: URLSearchParams) {\n  const url = meteorDataUrl(params);\n  fetchMeteorData(url)\n    .then((meteors) => {\n      store.update((s) => {\n        s.meteors = meteors;\n      });\n    })\n    .catch((e) => {\n      console.error(\"[meteors] fetch failed\", e);\n      throw e;\n    });\n}\n\n// column indices\nconst BEGIN_UTC_TIME = 1;\nconst IAU_CODE = 3;\nconst BEGIN_LATITUDE = 60;\nconst BEGIN_LONGITUDE = 62;\nconst BEGIN_HEIGHT = 64;\nconst END_LATITUDE = 66;\nconst END_LONGITUDE = 68;\nconst END_HEIGHT = 70;\nconst DURATION = 72;\nconst MAGNITUDE = 73;\nconst PEAK_HEIGHT = 74;\nconst MASS = 76;\nconst STATION_CODES = 82;\n\nconst NUM_COLUMNS = 83;\n\nasync function fetchMeteorData(url: string): Promise<MeteorData[]> {\n  const meteors: MeteorData[] = [];\n  let nextIndex = 0;\n  for await (let line of fetchline(url)) {\n    if (line.length === 0) continue;\n    if (line[0] === \"\\r\") line = line.slice(1); // fetchline bug?\n    if (line[0] === \"#\") continue; // comment, probably column headers\n\n    const fields = line.split(\";\");\n    if (fields.length !== NUM_COLUMNS) continue;\n\n    const s = (i: number): string => {\n      const f = fields[i];\n      return f ? f.trim() : \"\";\n    };\n\n    const f = (i: number): number => {\n      return parseFloat(s(i));\n    };\n\n    const beginTime = s(BEGIN_UTC_TIME);\n    const showerCode = s(IAU_CODE);\n    const begin = {\n      latitude: f(BEGIN_LATITUDE),\n      longitude: f(BEGIN_LONGITUDE),\n      height: f(BEGIN_HEIGHT),\n    };\n    const end = {\n      latitude: f(END_LATITUDE),\n      longitude: f(END_LONGITUDE),\n      height: f(END_HEIGHT),\n    };\n    const duration = f(DURATION);\n    const magnitude = f(MAGNITUDE);\n    const peakHeight = f(PEAK_HEIGHT);\n    const mass = f(MASS);\n    const stationCodes = s(STATION_CODES).split(\",\");\n\n    meteors.push({\n      index: nextIndex++,\n      beginTime,\n      showerCode,\n      begin,\n      end,\n      peakHeight,\n      magnitude,\n      duration,\n      mass,\n      stationCodes,\n    });\n  }\n\n  return meteors;\n}\n","import { useEffect } from \"react\";\n\nimport { Globe } from \"./Globe\";\nimport \"./App.css\";\n\nimport { store } from \"./store\";\nimport { initCameras } from \"./cameras\";\nimport { initMeteors } from \"./meteors\";\n\nfunction App() {\n  const queryParams = new URLSearchParams(window.location.search);\n\n  const markers = store.useState((s) => s.markers);\n  const meteors = store.useState((s) => s.meteors);\n\n  useEffect(initCameras, []);\n  useEffect(() => initMeteors(queryParams));\n\n  return (\n    <div className=\"App\">\n      <Globe markers={[...markers.values()]} meteors={meteors} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <React.Suspense fallback={<div>Loading... </div>}>\n      <App />\n    </React.Suspense>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}